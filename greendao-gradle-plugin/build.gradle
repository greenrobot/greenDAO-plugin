// https://docs.gradle.org/current/userguide/custom_plugins.html
apply plugin: 'kotlin'
apply plugin: 'groovy' // for dsl tests
apply plugin: 'maven'

group = 'org.greenrobot'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

def genResourcesDir = new File(buildDir, 'src/generated/resources')
def versionFile = new File(genResourcesDir, 'org/greenrobot/greendao/gradle/version.properties')

sourceSets {
    main {
        resources {
            srcDir genResourcesDir
        }
    }
}

dependencies {
    compile gradleApi()
    compile project(path: ':greendao-code-modifier', configuration: 'shadow')
    compileOnly 'com.android.tools.build:gradle:2.3.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.19'
}

// puts artifact version to properties file inside resources
task generateVersionProperties {
    inputs.property 'version', project.version
    outputs.file versionFile

    doLast {
        versionFile.parentFile.mkdirs()
        versionFile.withWriter {
            it.write """# Generated by gradle task generateVersionProperties
version=${project.version}
"""
        }
    }
}

tasks['compileKotlin'].dependsOn generateVersionProperties

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from 'README'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from 'README'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty('preferedRepo') && preferedRepo == 'local') {
                repository url: repositories.mavenLocal().url
            } else if (project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername')
                    && project.hasProperty('preferedPassword')) {
                configuration = configurations.deployerJars
                repository(url: preferedRepo) {
                    authentication(userName: preferedUsername, password: preferedPassword)
                }
            } else if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                def isSnapshot = version.endsWith('-SNAPSHOT')
                def sonatypeRepositoryUrl = isSnapshot ?
                        "https://oss.sonatype.org/content/repositories/snapshots/"
                        : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                repository(url: sonatypeRepositoryUrl) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            } else {
                println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}"
            }

            pom.project {
                packaging 'jar'
                name 'greenDAO Gradle Plugin'
                description 'Gradle Plugin for greenDAO, the light and fast ORM for Android'
                url 'http://greenrobot.org/greendao'

                scm {
                    url 'https://github.com/greenrobot/greenDAO'
                    connection 'scm:git@github.com:greenrobot/greenDAO.git'
                    developerConnection 'scm:git@github.com:greenrobot/greenDAO.git'
                }

                licenses {
                    license {
                        name 'GNU General Public License, Version 3'
                        url 'http://www.gnu.org/licenses/gpl.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'greenrobot'
                        name 'greenrobot'
                    }
                }

                issueManagement {
                    system 'GitHub Issues'
                    url 'https://github.com/greenrobot/greenDAO/issues'
                }

                organization {
                    name 'greenrobot'
                    url 'http://greenrobot.org'
                }
            }
        }
    }
}