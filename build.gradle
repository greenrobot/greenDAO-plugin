buildscript {
    ext.kotlin_version = '1.0.4'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

// TODO ut: figure out how to include the custom resolved versions in the built POM, for now
// adding all JDT deps manually in code-modifier build.gradle and excluding transitive dependencies
//allprojects {
//    configurations.all {
//        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
//            if (details.requested.group == 'org.eclipse.scout.sdk.deps') {
//                // Eclipse Scout JDT core POM dependencies have version format like '[3.11.0,3.11.1)'
//                // fix resolution to actual version numbers used, like 3.11.0.v20160516-2131, by using 3.11.0+
//                if (details.requested.name != 'org.eclipse.jdt.core') {
//                    def requestedVersion = details.requested.version
//                    details.useVersion requestedVersion.substring(1, requestedVersion.indexOf(",")) + "+"
//                }
//            }
//        }
//    }
//}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'signing'

    version = "3.2.0"

    repositories {
        jcenter()
        mavenCentral()
        maven {
            credentials {
                username internalUser
                password internalPassword
            }
            url "https://example.org/mvnrepo/"
        }
        mavenLocal()
    }

    configurations {
        deployerJars
    }

    dependencies {
        deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
    }

    signing {
        if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&
                project.hasProperty('signing.secretKeyRingFile')) {
            sign configurations.archives
        } else {
            println "Signing information missing/incomplete for ${project.name}"
        }
    }

    // Use afterEvaluate or all dependencies will be lost in the generated POM
    afterEvaluate {
        uploadArchives {
            repositories {
                mavenDeployer {
                    def isSnapshot = version.endsWith('-SNAPSHOT')
                    def sonatypeRepositoryUrl = isSnapshot ?
                            "https://oss.sonatype.org/content/repositories/snapshots/"
                            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                    if (project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername')
                            && project.hasProperty('preferedPassword')) {
                        configuration = configurations.deployerJars
                        repository(url: preferedRepo) {
                            authentication(userName: preferedUsername, password: preferedPassword)
                        }
                    } else if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
                        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                        repository(url: sonatypeRepositoryUrl) {
                            authentication(userName: sonatypeUsername, password: sonatypePassword)
                        }
                    } else {
                        println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}"
                    }

                    pom.project {
                        packaging 'jar'
                        url 'http://greenrobot.org/greendao'

                        scm {
                            url 'https://github.com/greenrobot/greenDAO'
                            connection 'scm:git@github.com:greenrobot/greenDAO.git'
                            developerConnection 'scm:git@github.com:greenrobot/greenDAO.git'
                        }

                        licenses {
                            license {
                                name 'GNU General Public License, Version 3'
                                url 'http://www.gnu.org/licenses/gpl.txt'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'greenrobot'
                                name 'greenrobot'
                            }
                        }

                        issueManagement {
                            system 'GitHub Issues'
                            url 'https://github.com/greenrobot/greenDAO/issues'
                        }

                        organization {
                            name 'greenrobot'
                            url 'http://greenrobot.org'
                        }
                    }
                }
            }
        }
    }
}
