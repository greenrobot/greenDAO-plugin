buildscript {
    ext.kotlin_version = '1.1.1'

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // TODO ut: remove ASM dependency once shadow plugin has updated ASM to 5.1+
        // override ASM version as pre 5.1 has VerifyError bug, but shadow plugin ships older version
        classpath 'org.ow2.asm:asm:5.1'
        classpath 'org.ow2.asm:asm-commons:5.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

// TODO ut: figure out how to include the custom resolved versions in the built POM, for now
// adding all JDT deps manually in code-modifier build.gradle and excluding transitive dependencies
//allprojects {
//    configurations.all {
//        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
//            if (details.requested.group == 'org.eclipse.scout.sdk.deps') {
//                // Eclipse Scout JDT core POM dependencies have version format like '[3.11.0,3.11.1)'
//                // fix resolution to actual version numbers used, like 3.11.0.v20160516-2131, by using 3.11.0+
//                if (details.requested.name != 'org.eclipse.jdt.core') {
//                    def requestedVersion = details.requested.version
//                    details.useVersion requestedVersion.substring(1, requestedVersion.indexOf(",")) + "+"
//                }
//            }
//        }
//    }
//}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'signing'

    version = "3.2.2"

    repositories {
        jcenter()
        mavenCentral()
        maven {
            credentials {
                username internalUser
                password internalPassword
            }
            url "https://example.org/mvnrepo/"
        }
        mavenLocal()
    }

    configurations {
        deployerJars
    }

    dependencies {
        deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
    }

    signing {
        if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&
                project.hasProperty('signing.secretKeyRingFile')) {
            sign configurations.archives
        } else {
            println "Signing information missing/incomplete for ${project.name}"
        }
    }
    
}
