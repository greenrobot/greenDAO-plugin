apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'org.greenrobot'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

dependencies {
    // shadow configuration dependencies are excluded from shadow jar, but included in compile tasks (see below)
    shadow "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    shadow "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    shadow 'org.greenrobot:greendao-api:3.2.0'
    shadow 'org.greenrobot:greendao-generator:3.2.0'
    shadow 'org.greenrobot:essentials:3.0.0-RC1'

    // use JDT Core packaged by the Eclipse Scout project, has the latest versions
    // as a custom version resolution resolution strategy seems to not work on projects using the plugin
    // manually include each dependency, but exclude its transitive dependencies
    compile("org.eclipse.scout.sdk.deps:org.eclipse.core.commands:3.7.0.v20150422-0725") {
        transitive = false
    }
    compile('org.eclipse.scout.sdk.deps:org.eclipse.core.contenttype:3.5.0.v20150421-2214') {
        transitive = false
    }
    compile('org.eclipse.scout.sdk.deps:org.eclipse.core.expressions:3.5.0.v20150421-2214') {
        transitive = false
    }
    compile('org.eclipse.scout.sdk.deps:org.eclipse.core.jobs:3.7.0.v20150330-2103') {
        transitive = false
    }
    compile('org.eclipse.scout.sdk.deps:org.eclipse.core.filesystem:1.5.0.v20150421-0713') {
        transitive = false
    }
    compile('org.eclipse.scout.sdk.deps:org.eclipse.core.resources:3.10.0.v20150423-0755') {
        transitive = false
    }
    compile('org.eclipse.scout.sdk.deps:org.eclipse.core.runtime:3.11.0.v20150405-1723') {
        transitive = false
    }
    compile('org.eclipse.scout.sdk.deps:org.eclipse.equinox.common:3.7.0.v20150402-1709') {
        transitive = false
    }
    compile('org.eclipse.scout.sdk.deps:org.eclipse.equinox.registry:3.6.0.v20150318-1503') {
        transitive = false
    }
    compile('org.eclipse.scout.sdk.deps:org.eclipse.equinox.preferences:3.5.300.v20150408-1437') {
        transitive = false
    }
    compile('org.eclipse.scout.sdk.deps:org.eclipse.osgi:3.10.100.v20150529-1857') {
        transitive = false
    }
    compile('org.eclipse.scout.sdk.deps:org.eclipse.text:3.5.400.v20150505-1044') {
        transitive = false
    }
    compile("org.eclipse.scout.sdk.deps:org.eclipse.jdt.core:3.11.0.v20150602-1242") {
        transitive = false
    }

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'com.natpryce:hamkrest:1.1.0.0'
}

// include dependencies from shadow configuration in compile tasks
tasks.withType(AbstractCompile) {
    classpath += configurations.shadow
}

shadowJar {
    // exclude any remaining unused files from jar
    exclude 'about_files/**'
    exclude 'ant_tasks/**'
    exclude '*.profile'
    exclude '*.properties'
    exclude '.api_description'
    exclude '.options'
    exclude 'about.html'
    exclude 'jdtCompilerAdapter.jar'
    exclude 'plugin.xml'
    exclude 'profile.list'

    // relocate JDT and all its dependencies, may conflict as they are available in many artifacts
    // main reason: Android plugin includes org.eclipse.jdt.core.compiler:ecj which has conflicting JDT core packaged
    relocate 'org.eclipse', "${project.group}.jdt"
    relocate 'org.apache', "${project.group}.apache"
    relocate 'org.osgi', "${project.group}.osgi"
    
    classifier = null // would default to "all"
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from 'README'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from 'README'
}

// TODO ut: uploadShadow ignores this config, only publishes shadowJar
artifacts {
    archives javadocJar
    archives sourcesJar
}

// shadow plugin configures uploadShadow task to exclude shadowed dependencies
uploadShadow {
    repositories {
        mavenDeployer {
            if (project.hasProperty('preferedRepo') && preferedRepo == 'local') {
                repository url: repositories.mavenLocal().url
            } else if (project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername')
                    && project.hasProperty('preferedPassword')) {
                configuration = configurations.deployerJars
                repository(url: preferedRepo) {
                    authentication(userName: preferedUsername, password: preferedPassword)
                }
            } else if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                def isSnapshot = version.endsWith('-SNAPSHOT')
                def sonatypeRepositoryUrl = isSnapshot ?
                        "https://oss.sonatype.org/content/repositories/snapshots/"
                        : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                repository(url: sonatypeRepositoryUrl) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            } else {
                println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}"
            }

            pom.project {
                packaging 'jar'
                name 'greenDAO Code Modifier'
                description 'Code modifier for greenDAO, the light and fast ORM for Android'
                url 'http://greenrobot.org/greendao'

                scm {
                    url 'https://github.com/greenrobot/greenDAO'
                    connection 'scm:git@github.com:greenrobot/greenDAO.git'
                    developerConnection 'scm:git@github.com:greenrobot/greenDAO.git'
                }

                licenses {
                    license {
                        name 'GNU General Public License, Version 3'
                        url 'http://www.gnu.org/licenses/gpl.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'greenrobot'
                        name 'greenrobot'
                    }
                }

                issueManagement {
                    system 'GitHub Issues'
                    url 'https://github.com/greenrobot/greenDAO/issues'
                }

                organization {
                    name 'greenrobot'
                    url 'http://greenrobot.org'
                }
            }
        }
    }
}
